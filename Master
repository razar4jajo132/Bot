# -*- coding: utf-8 -*-
"""
Created on Sat Oct  1 22:51:46 2022

@author: razar
"""

#setup with screen in top right corner
#zoom all the way in and click the compass then go all the way up

import os
from PIL import ImageGrab
import cv2 as cv
import pyautogui #pyautogui.mouseDown(); pyautogui.mouseUp()
import random
import time

os.chdir(r'C:/Users/razar/OneDrive/Documents/Bot/image')
def screenshot(name, xmin, ymin, xmax, ymax):
    ss_region = (xmin, ymin, xmax, ymax)
    ss_img = ImageGrab.grab(ss_region)
    ss_img.save(name + ".jpg")
    
def img_compare(mas_img, chk_img):
    master_img = cv.imread(mas_img, cv.IMREAD_UNCHANGED)
    check_img = cv.imread(chk_img, cv.IMREAD_UNCHANGED)
    result = cv.matchTemplate(master_img, check_img, cv.TM_CCOEFF_NORMED)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(result)
    # print('Best match top left position: %s' % str(max_loc))
    # print('Best match confidence: %s' % max_val)
    max_val = max_val * 1000
    return(max_val)

def ran_delay():
    value=random.random()*10
    print('Delay amount: ' + str(value))
    time.sleep(value)
    
def ran_click(min_x,min_y,max_x,max_y):
    x_click = random.randint(min_x, max_x)
    y_click = random.randint(min_y, max_y)
    pyautogui.click(x=x_click, y=y_click)    
    #need to add pyautogui down and up with a delay timer in teh clicker
    #figure out the touch screen right click delay amount
    return(x_click, y_click)
    
# full_inv = 
# empty_plot = .97

###################### SCREEN SHOTS ##################################
fullscreen = screenshot
inventory = screenshot
plot = screenshot
desktop = screenshot

################### CLICK LOCATIONS ##############################
paper_cl = ran_click(1725, 220, 1743, 237)
iron_cl = ran_click(1725, 250, 1743, 270)
res_cl = ran_click(1393, 140, 1495, 243) #click on resource 

########################## IMAGE COMPARE #########################
check_plot = img_compare('empty_plot.jpg', 'plot.jpg')
check_inventory = img_compare('inv1.jpg', 'inventory.jpg')

####################### PIXEL IMAGE LOCATIONS ####################
fullscreen('fullscreen', 960, 0, 1920, 540)
desktop('desktop', 0, 0, 1920, 1080)
inventory('inventory', 1700, 240, 1865, 447)
plot('plot', 1380, 120, 1500, 360)



# try:
#     while True:
       
###################### PLOT CHECK LOOP ##########################
plot('plot', 1380, 120, 1500, 360)
check_plot = int(img_compare('empty_plot.jpg', 'plot.jpg'))
ran_delay()
if check_plot <= 950:
    ran_click(1393, 140, 1495, 243)
    # plcl_x = res_cl[0]
    # plcl_y = res_cl[1]
    # pyautogui.click(x=plcl_x, y=plcl_y)
else:
    pass


#################### INVENTORY CHECK LOOP #######################
ran_delay()
for i in range(2):
    inventory('inventory', 1700, 240, 1865, 447)
    check_inventory = int(img_compare('inv1.jpg', 'inventory.jpg'))
    if check_inventory >= 950:
        ran_click(1725, 220, 1743, 237)
        # incl_x = res_cl[0]
        # incl_y = res_cl[1]
        # pyautogui.click(x=plcl_x, y=plcl_y)
        ran_delay()
        ran_click(1725, 250, 1743, 270)
    else:
        print('inventory not full')
        pass
    

    
check_plot = img_compare('empty_plot.jpg', 'plot.jpg')

img_compare('inv1.jpg', 'inventory.jpg')







# except KeyboardInterrupt:
#     pass
# print('Program Complete')
